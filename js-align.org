#+TITLE:  js-align.org
#+AUTHOR: John Hooks
#+EMAIL:  john@bitmachina.com
#+DATE:   <2016-09-07 Wed>
#+STARTUP: indent
#+STARTUP: hidestars
** Purpose
This project sprung from the desire to include indentation support
for arrow functions in ~js-mode~. While digging through the code of
~js.el~, I found myself scribbling notes all all over the place to
make sense of what I was reading. As I had recently begun to play
around with Org mode, I thought it would be a great opportunity to
attempt to improve Emacs JavaScript indentation and give a thorough
explaination of my solution.

#+begin_src emacs-lisp :tangle yes
  ;;; js-align.el --- Manage the indentation of JavaScript.
#+end_src

** License
Some of this code is based on ~js.el~. I believe I have properly
included it in the license, though in addition I will also make note
of where code is heavily barrowed. I am unsure of whether the FSF
copyright should be included, though what could it hurt?

#+begin_src emacs-lisp :tangle yes
  ;; Copyright (C) 2016 John Hooks
  ;; Copyright (C) 2008-2016 Free Software Foundation, Inc.

  ;; Author: Karl Landstrom <karl.landstrom@brgeight.se>
  ;;         Daniel Colascione <dan.colascione@gmail.com>
  ;;         John Hooks <john@bitmachina.com>

  ;; Maintainer: John Hooks <john@bitmachina.com>
  ;; Version: 0.1
  ;; Keywords: languages, javascript

  ;; This file is part of js-align
  ;;
  ;; js-align is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; js-align is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with js-align.  If not, see <http://www.gnu.org/licenses/>.
#+end_src

** Commentary
#+begin_src emacs-lisp :tangle yes
  ;;; Commentary:

  ;; This is based on the indentation code of Daniel Calascione's
  ;; `js-mode' which is based on Karl Landstrom's `javascript-mode'.

  ;; This software is an attempt to improve the handling of JavaScript
  ;; indentation in a flexible and easy to reason about way.

  ;; General Remarks:
  ;;
  ;; Exported names start with "js-align"; private names start with
  ;; "js-align--".
#+end_src

** Require
~js-align.el~ requires variables and functions which are defined in
~js.el~, and ~cl-lib~ is handy.

#+begin_src emacs-lisp :tangle yes
  ;;; Code:

  (require 'js)
  (require 'cl-lib)
#+end_src

** Regular Expressions
*** =js-align--empty-re=
Used by ~js-align--terminal-arrow-p~

#+NAME: js-align--empty-re
#+begin_src emacs-lisp :tangle yes
(defvar js-align--empty-re "\\s-*\\($\\|/[/*]\\|//\\)")
#+end_src

Needs some work. Will currently match a multi line comment that may
not continue until the EOL.

*** =js-align--indent-operator-re=
Used by ~js-align--looking-at-indent-operator-p~
#+NAME: js-align--indent-operator-re
#+begin_src emacs-lisp :tangle yes
  ;; Based on `js--indent-operator-re' from `js.el'. Though will not
  ;; match the fat arrow operator '=>'
  (defvar js-align--indent-operator-re
    (concat "[-+*/%<>&^|?:.]\\([^-+*/.]\\|$\\)\\|!?=\\([^>]\\|$\\)\\|"
            (js--regexp-opt-symbol '("in" "instanceof"))))
#+end_src

Will match:
#+begin_example
  - + * / % < > & ^ | ? : . = !=
#+end_example

Because they are not excluded, will also match:
#+begin_example
  <= >= == === !==
#+end_example

Will not match:
#+begin_example
  -- ++ => /*
#+end_example

** Functions
*** =js-align--ternary-search=
Used by ~js-align--ternary-colon~

#+NAME: js-align--ternary-search
#+begin_src emacs-lisp :tangle yes
  (defun js-align--ternary-search (&optional jump)
    "Search backward for the context of a colon.
  If JUMP skip over a matched ternary pair."
    (js--re-search-backward "[?:{}]\\|\\_<case\\_<" nil t)
    (cond ((eq (char-after) ?})
           (forward-char)
           (backward-sexp)
           (js-align--ternary-search))
          ((eq (char-after) ?:)
           (js-align--ternary-search t))
          ((eq (char-after) ??)
           (if jump
               (js-align--ternary-search)
             t))
          (t 'nil)))
#+end_src

When searching for the context of colon, it is necessary to jump
over any curly brase pairs, unless a single opening brace is reached.
If a another colon is found while matching, check if it part of 
another ternary expression, if so jump over it.

*** =js-align--ternary-colon-p=
Used by ~js-align--continued-expression-p~

#+NAME: js-align--ternary-colon-p
#+begin_src emacs-lisp :tangle yes
  (defun js-align--ternary-colon-p ()
      "Return non-nil if the colon at point is in a ternary expression"
      (message "working")
      (save-excursion
        (js-align--ternary-search)))
#+end_src

Something is going going wrong in this expression, some how the
third line is not being considered a continued expression.

#+begin_src javascript :tangle no
  let foo = (true)
    ? function () { /* */ }
  : function () { /* */ }
#+end_src

*** =js-align--terminal-arrow-p=
Used by ~js-align--proper-indentation~

#+NAME: js-align--terminal-arrow-p
#+begin_src emacs-lisp :tangle yes
  (defun js-align--terminal-arrow-p ()
    "Return non-nil if the line ends with an fat arrow."
    (save-excursion
      (goto-char (point-at-eol))
      (and (js--re-search-backward "[,(]\\|=>" (point-at-bol) t)
           (looking-at (concat "=>" js-align--empty-re)))))
#+end_src

Matches if the line's last JavaScipt token is a fat arrow, ignoring
whitespace and comments.

*** =js-align--looking-at-indent-operator-p=
Used by ~js-align--continued-expression-p~

#+NAME: js-align--looking-at-indent-operator-p
#+begin_src emacs-lisp :tangle yes
  ;; This is base on the code `js--looking-at-operator-p' from `js.el'.
  (defun js-align--looking-at-indent-operator-p ()
    "Return non-nil if point is on a JavaScript operator requiring indentation."
    (save-match-data
      (and (looking-at js-align--indent-operator-re)
           ;; exclude a colon if used outside a ternary expressions
           (or (not (eq (char-after) ?:))
               (js-align--ternary-colon-p))
           ;; looking back to catch ++ -- /* */ =>
           (or (not (memq (char-before) '(?- ?+ ?* ?/ ?=)))
               (save-excursion
                 (backward-char)
                 (looking-at js-align--indent-operator-re)))
           (not (and
                 (eq (char-after) ?*)
                 ;; Generator method (possibly using computed property).
                 (looking-at (concat "\\* *\\(?:\\[\\|" js--name-re " *(\\)"))
                 (save-excursion
                   (js--backward-syntactic-ws)
                   ;; We might misindent some expressions that would
                   ;; return NaN anyway.  Shouldn't be a problem.
                   (memq (char-before) '(?, ?} ?{))))))))
#+end_src

There are exceptions to ~js-align--indent-operator-re~ which must be
accounted for.
+ The use of a ~:~ outside of a ternary expression should not be 
  considered a continued expression.
+ It is possible to be ~looking-at~ from the middle of an operator
  token which should not be matched. Examining the character before point
  should catch the situations which need a second examination from one
  character back.
+ Generator method definitions use the ~*~ character which are not a
  continued expression.
  
  *Example:*
  
  #+begin_src javascript :tangle no
    let obj = {
      ,* generatorMethod() {
        /* ··· */
      }
    }
  #+end_src
*** =js-align--continued-expression-p=
Used by ~js-align--proper-indentation~

#+NAME: js-align--continued-expression-p
#+begin_src emacs-lisp :tangle yes
  ;; This is base on the code `js--continued-expression-p' from `js.el'.
  (defun js-align--continued-expression-p ()
    "Return non-nil if the current line continues an expression."
    (save-excursion
      (back-to-indentation)
      (if (js-align--looking-at-indent-operator-p)
          ;; + and - are also used as unary operators which are not
          ;; continued expressions
          (or (not (memq (char-after) '(?- ?+)))
              (progn
                (forward-comment (- (point)))
                (not (memq (char-before) '(?, ?\[ ?\()))))
        ;; the current line did not tigger a continued expression though
        ;; must look above in case the last expression was
        (and (js--re-search-backward "\n" nil t)
             (progn
               (skip-chars-backward " \t")
               (or (bobp) (backward-char))
               (and (> (point) (point-min))
                    (js-align--looking-at-indent-operator-p)))))))
#+end_src

- If ~js-align--looking-at-indent-operator-p~ returns true, insure the
  match was neither a unary negation ~-~ or unary plus ~+~.
- Else, examine the last character of the previous expression for an
  indentation operator token.

*** =js-align--proper-indentation=
Used as ~:override~ advise to ~js--proper-indentation~

User customization should remain the same by utilizing user defined 
variables from ~js.el~
- ~js-indent-level~
- ~js-expr-indent-offset~
- ~js-paren-indent-offset~
- ~js-square-indent-offset~
- ~js-curly-indent-offset~

#+NAME: js-align--proper-indentation
#+begin_src emacs-lisp :tangle yes
  ;; This is base on the code `js--proper-indentation' from `js.el'.
  (defun js-align--proper-indentation (parse-status)
    "Return the proper indentation for the current line."
    (save-excursion
      (back-to-indentation)
      (cond ((nth 4 parse-status)    ; inside comment
             (js--get-c-offset 'c (nth 8 parse-status)))
            ((nth 3 parse-status) 0) ; inside string
            ((js--ctrl-statement-indentation))
            ;; ((js--multi-line-declaration-indentation)) ; disabled
            ((nth 1 parse-status)
             ;; A single closing paren/bracket should be indented at the
             ;; same level as the opening statement. Same goes for
             ;; "case" and "default".
             (let ((status '())
                   (same-indent-p (looking-at "[]})]"))
                   (switch-keyword-p (looking-at "default\\_>\\|case\\_>[^:]"))
                   (continued-expr-p (js-align--continued-expression-p)))
               (goto-char (nth 1 parse-status)) ;go to the opening char
               (if (or (looking-at "[({[]\\s-*\\(/[/*]\\|$\\)")
                       (js-align--terminal-arrow-p))
                   (progn 
                     ;; nothing following the opening paren/bracket
                     ;; except maybe a fat arrow
                     (skip-syntax-backward " ")
                     ;; Is this to walk back across an argument list?
                     (when (eq (char-before) ?\)) (backward-list))
                     (back-to-indentation)
                     ;; (js--maybe-goto-declaration-keyword-end) ; disabled
                     (let* ((in-switch-p (unless same-indent-p
                                           (looking-at "\\_<switch\\_>")))
                            (same-indent-p (or same-indent-p
                                               (and switch-keyword-p
                                                    in-switch-p)))
                            (indent
                             (cond (same-indent-p
                                    (current-column))
                                   (continued-expr-p
                                    (+ (current-column) (* 2 js-indent-level)
                                       js-expr-indent-offset))
                                   (t
                                    (+ (current-column) js-indent-level
                                       (pcase (char-after (nth 1 parse-status))
                                         (?\( js-paren-indent-offset)
                                         (?\[ js-square-indent-offset)
                                         (?\{ js-curly-indent-offset)))))))

                       (if in-switch-p
                           (+ indent js-switch-indent-offset)
                         indent)))
                 
                 ;; If there is something following the opening
                 ;; paren/bracket, everything else should be indented at
                 ;; the same level
                 (unless same-indent-p
                   (forward-char)
                   (skip-chars-forward " \t"))
                 (current-column))))

            ((js--continued-expression-p)
             (+ js-indent-level js-expr-indent-offset))
            (t 0))))
#+end_src

**** Breaks from =js.el=
- Removed support for [[http://sweetjs.org/][macros]] and [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions][array comprehensions]]. I plan to create
  hooks to include support for these and any other features which are
  not standard JavaScript.
- A have added basic support for indenting the explicit return 
  expression of arrow functions over multiple lines. There are still
  some issues, though I plan to continue weeding them out.
- For now I have disabled the multi line declaration indention. At the
  moment it causes chained methods to be indented to the same column
  as a variable's  declaration keyword, plus the offset of continued
  expressions, which ends up at minimum being 6 spaces.

** Goals
- Create a group of tests.
- Create a few well placed hooks for customization.
- Reintroduce the multi line declaration indention after taken time
  to review it.

** In Closing
I hope you have found this helpful.

#+begin_src emacs-lisp :tangle yes
  (provide 'js-align)
  ;;; js-align.el ends here
#+end_src
